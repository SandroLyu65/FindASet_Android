package be.kuleuven.findaset.model;

import java.util.ArrayList;

import be.kuleuven.findaset.activities.MainActivity;

/**
 * Here in this interface are listed all methods implemented by AbstractFindASet and
 * their javadocs explaining their basic functionality.
 *
 * The logic of the game is implemented based on the translation of the features of
 * a card into a 4-digit cardId that facilitates the operations needed to carryout
 * the game.
 *
 * The basic logic of the game includes:
 *
 *      // TODO - add simple sequence of steps that compose the code flow
 *
 */
public interface InterfaceFindASet {
    void setUI(MainActivity mainActivity);

    /**
     * At the start of a new game all relevant field are initialized and the main
     * activity is notified of a new game of 12 cards.
     *
     *      All cards are marked as unselected by setting the elements of
     *      isCardSelected to false.
     *
     *      firstSetOnPage is populated with dummy values.
     */
    void startNewGame();

    /**
     * Populates table with dummy value - 9999
     * This number indicates that a cell on the table has not been filled with a
     * valid cardId.
     *
     * @param numOfCardsOnTable - size of current Table (6 - 12)
     */
    void initializeTable(int numOfCardsOnTable);

    /**
     * Generates matrix that maps to a correct set of three cards
     * when the game is initialized.
     *
     * Game rules:
     * 0 the same + 4 different; or 1 the same + 3 different;
     * or 2 the same + 2 different; or 3 the same + 1 different.
     *
     * The featureMatrix randomly selects the features that
     * form a set among three cards.
     * featureMatrix example:
     *
     * nr.     color    shading   type
     *
     * card n1.    1       3        2         1
     *
     * card n2.    1       1        2         3
     *
     * card n3.    1       2        2         2
     * --------------------------------------------
     * bool        1       0        1         0
     *
     * Based on the classification:
     * one(1),two(2),three(3)
     * green(1), red(2), purple(3)
     * open(1), striped(2), solid(3)
     * oval(1), diamond(2), squiggle(3)
     *
     * So the example above would pick a set of
     * one purple striped oval
     * one green striped squiggle
     * one red striped diamond
     *
     * @return featureMatrix - 3x4 Array of ints
     */
    int[][] getFeatureMatrix();

    /**
     * Creates a 4-digit cardId that based on the feature matrix generated by
     * the method getFeatureMatrix().
     *
     * @return set - Array of 3 4-digit cardIds
     */
    ArrayList<Integer> generateSet();

    /**
     * This method is used to place cardIds randomly on the cardIdTable.
     *
     * As long as the player has found less than 69 cards tha form sets,
     * it will first place the set created by generateSet() and then place other
     * 9 random card Ids.
     *
     * If the player has found over 69 cards, there are only 12 cards
     * remaining so setCardsTable places all the remaining cards.
     *
     * @param numOfCardsOnTable - size of current Table (6 - 12)
     */
    void setCardsTable(int numOfCardsOnTable);


    /**
     * @param testedCardsIndex
     * @return
     */
    boolean checkSet(ArrayList<Integer> testedCardsIndex);

    /**
     * @param featureMatrix
     * @param isSet
     * @return
     */
    boolean checkFeatureMatrix(int[][] featureMatrix, boolean isSet);


    /**
     * @param selectedCardsIndex
     */
    void updateTable(ArrayList<Integer> selectedCardsIndex);

    /**
     * @return
     */
    boolean checkAllSetOnPage();

    /**
     *
     */
    void checkWin();

    void toggle(int index);

    void select(int index);

    void unselect(int index);

    void showSet();

    ArrayList<Integer> getCardsIdTable();

    Boolean getIsCardSelected(int index);

    ArrayList<Integer> getSelectedCardsIndex();

    ArrayList<Integer> getFirstSetOnPage();

    int getHints();
}
